{"version":3,"sources":["webpack:///src/libs/CSInterface.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA;AACA;;AAEA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;AACA;;AAEA,se;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,e;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E","file":"scripts.js","sourcesContent":["/**************************************************************************************************\r\n*\r\n* ADOBE SYSTEMS INCORPORATED\r\n* Copyright 2013 Adobe Systems Incorporated\r\n* All Rights Reserved.\r\n*\r\n* NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the\r\n* terms of the Adobe license agreement accompanying it.  If you have received this file from a\r\n* source other than Adobe, then your use, modification, or distribution of it requires the prior\r\n* written permission of Adobe.\r\n*\r\n**************************************************************************************************/\r\n\r\n/** CSInterface - v6.0.0 */\r\n\r\n/**\r\n * Stores constants for the window types supported by the CSXS infrastructure.\r\n */\r\nfunction CSXSWindowType()\r\n{\r\n};\r\n\r\n/** Constant for the CSXS window type Panel. */\r\nCSXSWindowType._PANEL = \"Panel\";\r\n\r\n/** Constant for the CSXS window type Modeless. */\r\nCSXSWindowType._MODELESS = \"Modeless\";\r\n\r\n/** Constant for the CSXS window type ModalDialog. */\r\nCSXSWindowType._MODAL_DIALOG = \"ModalDialog\";\r\n\r\n/** EvalScript error message */\r\nEvalScript_ErrMessage = \"EvalScript error.\";\r\n\r\n/**\r\n * @class Version\r\n * Defines a version number with major, minor, micro, and special\r\n * components. The major, minor and micro values are numeric; the special\r\n * value can be any string.\r\n *\r\n * @param major   The major version component, a positive integer up to nine digits long.\r\n * @param minor   The minor version component, a positive integer up to nine digits long.\r\n * @param micro   The micro version component, a positive integer up to nine digits long.\r\n * @param special The special version component, an arbitrary string.\r\n *\r\n * @return A new \\c Version object.\r\n */\r\nfunction Version(major, minor, micro, special)\r\n{\r\n    this.major = major;\r\n    this.minor = minor;\r\n    this.micro = micro;\r\n    this.special = special;\r\n};\r\n\r\n/**\r\n * The maximum value allowed for a numeric version component.\r\n * This reflects the maximum value allowed in PlugPlug and the manifest schema.\r\n */\r\nVersion.MAX_NUM = 999999999;\r\n\r\n/**\r\n * @class VersionBound\r\n * Defines a boundary for a version range, which associates a \\c Version object\r\n * with a flag for whether it is an inclusive or exclusive boundary.\r\n *\r\n * @param version   The \\c #Version object.\r\n * @param inclusive True if this boundary is inclusive, false if it is exclusive.\r\n *\r\n * @return A new \\c VersionBound object.\r\n */\r\nfunction VersionBound(version, inclusive)\r\n{\r\n    this.version = version;\r\n    this.inclusive = inclusive;\r\n};\r\n\r\n/**\r\n * @class VersionRange\r\n * Defines a range of versions using a lower boundary and optional upper boundary.\r\n *\r\n * @param lowerBound The \\c #VersionBound object.\r\n * @param upperBound The \\c #VersionBound object, or null for a range with no upper boundary.\r\n *\r\n * @return A new \\c VersionRange object.\r\n */\r\nfunction VersionRange(lowerBound, upperBound)\r\n{\r\n    this.lowerBound = lowerBound;\r\n    this.upperBound = upperBound;\r\n};\r\n\r\n/**\r\n * @class Runtime\r\n * Represents a runtime related to the CEP infrastructure.\r\n * Extensions can declare dependencies on particular\r\n * CEP runtime versions in the extension manifest.\r\n *\r\n * @param name    The runtime name.\r\n * @param version A \\c #VersionRange object that defines a range of valid versions.\r\n *\r\n * @return A new \\c Runtime object.\r\n */\r\nfunction Runtime(name, versionRange)\r\n{\r\n    this.name = name;\r\n    this.versionRange = versionRange;\r\n};\r\n\r\n/**\r\n* @class Extension\r\n* Encapsulates a CEP-based extension to an Adobe application.\r\n*\r\n* @param id              The unique identifier of this extension.\r\n* @param name            The localizable display name of this extension.\r\n* @param mainPath        The path of the \"index.html\" file.\r\n* @param basePath        The base path of this extension.\r\n* @param windowType          The window type of the main window of this extension.\r\n                 Valid values are defined by \\c #CSXSWindowType.\r\n* @param width           The default width in pixels of the main window of this extension.\r\n* @param height          The default height in pixels of the main window of this extension.\r\n* @param minWidth        The minimum width in pixels of the main window of this extension.\r\n* @param minHeight       The minimum height in pixels of the main window of this extension.\r\n* @param maxWidth        The maximum width in pixels of the main window of this extension.\r\n* @param maxHeight       The maximum height in pixels of the main window of this extension.\r\n* @param defaultExtensionDataXml The extension data contained in the default \\c ExtensionDispatchInfo section of the extension manifest.\r\n* @param specialExtensionDataXml The extension data contained in the application-specific \\c ExtensionDispatchInfo section of the extension manifest.\r\n* @param requiredRuntimeList     An array of \\c Runtime objects for runtimes required by this extension.\r\n* @param isAutoVisible       True if this extension is visible on loading.\r\n* @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.\r\n*\r\n* @return A new \\c Extension object.\r\n*/\r\nfunction Extension(id, name, mainPath, basePath, windowType, width, height, minWidth, minHeight, maxWidth, maxHeight,\r\n                   defaultExtensionDataXml, specialExtensionDataXml, requiredRuntimeList, isAutoVisible, isPluginExtension)\r\n{\r\n    this.id = id;\r\n    this.name = name;\r\n    this.mainPath = mainPath;\r\n    this.basePath = basePath;\r\n    this.windowType = windowType;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.minWidth = minWidth;\r\n    this.minHeight = minHeight;\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this.defaultExtensionDataXml = defaultExtensionDataXml;\r\n    this.specialExtensionDataXml = specialExtensionDataXml;\r\n    this.requiredRuntimeList = requiredRuntimeList;\r\n    this.isAutoVisible = isAutoVisible;\r\n    this.isPluginExtension = isPluginExtension;\r\n};\r\n\r\n/**\r\n * @class CSEvent\r\n * A standard JavaScript event, the base class for CEP events.\r\n *\r\n * @param type        The name of the event type.\r\n * @param scope       The scope of event, can be \"GLOBAL\" or \"APPLICATION\".\r\n * @param appId       The unique identifier of the application that generated the event.\r\n * @param extensionId     The unique identifier of the extension that generated the event.\r\n *\r\n * @return A new \\c CSEvent object\r\n */\r\nfunction CSEvent(type, scope, appId, extensionId)\r\n{\r\n    this.type = type;\r\n    this.scope = scope;\r\n    this.appId = appId;\r\n    this.extensionId = extensionId;\r\n};\r\n\r\n/** Event-specific data. */\r\nCSEvent.prototype.data = \"\";\r\n\r\n/**\r\n * @class SystemPath\r\n * Stores operating-system-specific location constants for use in the\r\n * \\c #CSInterface.getSystemPath() method.\r\n * @return A new \\c SystemPath object.\r\n */\r\nfunction SystemPath()\r\n{\r\n};\r\n\r\n/** The path to user data.  */\r\nSystemPath.USER_DATA = \"userData\";\r\n\r\n/** The path to common files for Adobe applications.  */\r\nSystemPath.COMMON_FILES = \"commonFiles\";\r\n\r\n/** The path to the user's default document folder.  */\r\nSystemPath.MY_DOCUMENTS = \"myDocuments\";\r\n\r\n/** @deprecated. Use \\c #SystemPath.Extension.  */\r\nSystemPath.APPLICATION = \"application\";\r\n\r\n/** The path to current extension.  */\r\nSystemPath.EXTENSION = \"extension\";\r\n\r\n/** The path to hosting application's executable.  */\r\nSystemPath.HOST_APPLICATION = \"hostApplication\";\r\n\r\n/**\r\n * @class ColorType\r\n * Stores color-type constants.\r\n */\r\nfunction ColorType()\r\n{\r\n};\r\n\r\n/** RGB color type. */\r\nColorType.RGB = \"rgb\";\r\n\r\n/** Gradient color type. */\r\nColorType.GRADIENT = \"gradient\";\r\n\r\n/** Null color type. */\r\nColorType.NONE = \"none\";\r\n\r\n/**\r\n * @class RGBColor\r\n * Stores an RGB color with red, green, blue, and alpha values.\r\n * All values are in the range [0.0 to 255.0]. Invalid numeric values are\r\n * converted to numbers within this range.\r\n *\r\n * @param red   The red value, in the range [0.0 to 255.0].\r\n * @param green The green value, in the range [0.0 to 255.0].\r\n * @param blue  The blue value, in the range [0.0 to 255.0].\r\n * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].\r\n *      The default, 255.0, means that the color is fully opaque.\r\n *\r\n * @return A new RGBColor object.\r\n */\r\nfunction RGBColor(red, green, blue, alpha)\r\n{\r\n    this.red = red;\r\n    this.green = green;\r\n    this.blue = blue;\r\n    this.alpha = alpha;\r\n};\r\n\r\n/**\r\n * @class Direction\r\n * A point value  in which the y component is 0 and the x component\r\n * is positive or negative for a right or left direction,\r\n * or the x component is 0 and the y component is positive or negative for\r\n * an up or down direction.\r\n *\r\n * @param x     The horizontal component of the point.\r\n * @param y     The vertical component of the point.\r\n *\r\n * @return A new \\c Direction object.\r\n */\r\nfunction Direction(x, y)\r\n{\r\n    this.x = x;\r\n    this.y = y;\r\n};\r\n\r\n/**\r\n * @class GradientStop\r\n * Stores gradient stop information.\r\n *\r\n * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].\r\n * @param rgbColor The color of the gradient at this point, an \\c #RGBColor object.\r\n *\r\n * @return GradientStop object.\r\n */\r\nfunction GradientStop(offset, rgbColor)\r\n{\r\n    this.offset = offset;\r\n    this.rgbColor = rgbColor;\r\n};\r\n\r\n/**\r\n * @class GradientColor\r\n * Stores gradient color information.\r\n *\r\n * @param type          The gradient type, must be \"linear\".\r\n * @param direction     A \\c #Direction object for the direction of the gradient\r\n                (up, down, right, or left).\r\n * @param numStops          The number of stops in the gradient.\r\n * @param gradientStopList  An array of \\c #GradientStop objects.\r\n *\r\n * @return A new \\c GradientColor object.\r\n */\r\nfunction GradientColor(type, direction, numStops, arrGradientStop)\r\n{\r\n    this.type = type;\r\n    this.direction = direction;\r\n    this.numStops = numStops;\r\n    this.arrGradientStop = arrGradientStop;\r\n};\r\n\r\n/**\r\n * @class UIColor\r\n * Stores color information, including the type, anti-alias level, and specific color\r\n * values in a color object of an appropriate type.\r\n *\r\n * @param type          The color type, 1 for \"rgb\" and 2 for \"gradient\".\r\n                The supplied color object must correspond to this type.\r\n * @param antialiasLevel    The anti-alias level constant.\r\n * @param color         A \\c #RGBColor or \\c #GradientColor object containing specific color information.\r\n *\r\n * @return A new \\c UIColor object.\r\n */\r\nfunction UIColor(type, antialiasLevel, color)\r\n{\r\n    this.type = type;\r\n    this.antialiasLevel = antialiasLevel;\r\n    this.color = color;\r\n};\r\n\r\n/**\r\n * @class AppSkinInfo\r\n * Stores window-skin properties, such as color and font. All color parameter values are \\c #UIColor objects except that systemHighlightColor is \\c #RGBColor object.\r\n *\r\n * @param baseFontFamily        The base font family of the application.\r\n * @param baseFontSize          The base font size of the application.\r\n * @param appBarBackgroundColor     The application bar background color.\r\n * @param panelBackgroundColor      The background color of the extension panel.\r\n * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.\r\n * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.\r\n * @param systemHighlightColor          The operating-system highlight color, as sRGB.\r\n *\r\n * @return AppSkinInfo object.\r\n */\r\nfunction AppSkinInfo(baseFontFamily, baseFontSize, appBarBackgroundColor, panelBackgroundColor, appBarBackgroundColorSRGB, panelBackgroundColorSRGB, systemHighlightColor)\r\n{\r\n    this.baseFontFamily = baseFontFamily;\r\n    this.baseFontSize = baseFontSize;\r\n    this.appBarBackgroundColor = appBarBackgroundColor;\r\n    this.panelBackgroundColor = panelBackgroundColor;\r\n    this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;\r\n    this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;\r\n    this.systemHighlightColor = systemHighlightColor;\r\n};\r\n\r\n/**\r\n * @class HostEnvironment\r\n * Stores information about the environment in which the extension is loaded.\r\n *\r\n * @param appName   The application's name.\r\n * @param appVersion    The application's version.\r\n * @param appLocale The application's current license locale.\r\n * @param appUILocale   The application's current UI locale.\r\n * @param appId     The application's unique identifier.\r\n * @param isAppOnline  True if the application is currently online.\r\n * @param appSkinInfo   An \\c #AppSkinInfo object containing the application's default color and font styles.\r\n *\r\n * @return A new \\c HostEnvironment object.\r\n */\r\nfunction HostEnvironment(appName, appVersion, appLocale, appUILocale, appId, isAppOnline, appSkinInfo)\r\n{\r\n    this.appName = appName;\r\n    this.appVersion = appVersion;\r\n    this.appLocale = appLocale;\r\n    this.appUILocale = appUILocale;\r\n    this.appId = appId;\r\n    this.isAppOnline = isAppOnline;\r\n    this.appSkinInfo = appSkinInfo;\r\n};\r\n\r\n/**\r\n * @class HostCapabilities\r\n * Stores information about the host capabilities.\r\n *\r\n * @param EXTENDED_PANEL_MENU True if the application supports panel menu.\r\n * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.\r\n * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.\r\n * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.\r\n * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.\r\n *\r\n * @return A new \\c HostCapabilities object.\r\n */\r\nfunction HostCapabilities(EXTENDED_PANEL_MENU, EXTENDED_PANEL_ICONS, DELEGATE_APE_ENGINE, SUPPORT_HTML_EXTENSIONS, DISABLE_FLASH_EXTENSIONS)\r\n{\r\n    this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;\r\n    this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;\r\n    this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;\r\n    this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;\r\n\tthis.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0\r\n};\r\n\r\n/**\r\n * @class ApiVersion\r\n * Stores current api version.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @param major  The major version\r\n * @param minor  The minor version.\r\n * @param micro  The micro version.\r\n *\r\n * @return ApiVersion object.\r\n */\r\nfunction ApiVersion(major, minor, micro)\r\n{\r\n    this.major = major;\r\n    this.minor = minor;\r\n    this.micro = micro;\r\n};\r\n\r\n/**\r\n * @class MenuItemStatus\r\n * Stores flyout menu item status\r\n *\r\n * Since 5.2.0\r\n *\r\n * @param menuItemLabel  The menu item label.\r\n * @param enabled  \t\t True if user wants to enable the menu item.\r\n * @param checked  \t\t True if user wants to check the menu item.\r\n *\r\n * @return MenuItemStatus object.\r\n */\r\nfunction MenuItemStatus(menuItemLabel, enabled, checked)\r\n{\r\n\tthis.menuItemLabel = menuItemLabel;\r\n\tthis.enabled = enabled;\r\n\tthis.checked = checked;\r\n};\r\n\r\n/**\r\n * @class ContextMenuItemStatus\r\n * Stores the status of the context menu item.\r\n *\r\n * Since 5.2.0\r\n *\r\n * @param menuItemID     The menu item id.\r\n * @param enabled  \t\t True if user wants to enable the menu item.\r\n * @param checked  \t\t True if user wants to check the menu item.\r\n *\r\n * @return MenuItemStatus object.\r\n */\r\nfunction ContextMenuItemStatus(menuItemID, enabled, checked)\r\n{\r\n\tthis.menuItemID = menuItemID;\r\n\tthis.enabled = enabled;\r\n\tthis.checked = checked;\r\n};\r\n//------------------------------ CSInterface ----------------------------------\r\n\r\n/**\r\n * @class CSInterface\r\n * This is the entry point to the CEP extensibility infrastructure.\r\n * Instantiate this object and use it to:\r\n * <ul>\r\n * <li>Access information about the host application in which an extension is running</li>\r\n * <li>Launch an extension</li>\r\n * <li>Register interest in event notifications, and dispatch events</li>\r\n * </ul>\r\n *\r\n * @return A new \\c CSInterface object\r\n */\r\nfunction CSInterface()\r\n{\r\n};\r\n\r\n/**\r\n * User can add this event listener to handle native application theme color changes.\r\n * Callback function gives extensions ability to fine-tune their theme color after the\r\n * global theme color has been changed.\r\n * The callback function should be like below:\r\n *\r\n * @example\r\n * // event is a CSEvent object, but user can ignore it.\r\n * function OnAppThemeColorChanged(event)\r\n * {\r\n *    // Should get a latest HostEnvironment object from application.\r\n *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\r\n *    // Gets the style information such as color info from the skinInfo,\r\n *    // and redraw all UI controls of your extension according to the style info.\r\n * }\r\n */\r\nCSInterface.THEME_COLOR_CHANGED_EVENT = \"com.adobe.csxs.events.ThemeColorChanged\";\r\n\r\n/** The host environment data object. */\r\nCSInterface.prototype.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\r\n\r\n/** Retrieves information about the host environment in which the\r\n *  extension is currently running.\r\n *\r\n *   @return A \\c #HostEnvironment object.\r\n */\r\nCSInterface.prototype.getHostEnvironment = function()\r\n{\r\n    this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\r\n    return this.hostEnvironment;\r\n};\r\n\r\n/** Closes this extension. */\r\nCSInterface.prototype.closeExtension = function()\r\n{\r\n    window.__adobe_cep__.closeExtension();\r\n};\r\n\r\n/**\r\n * Retrieves a path for which a constant is defined in the system.\r\n *\r\n * @param pathType The path-type constant defined in \\c #SystemPath ,\r\n *\r\n * @return The platform-specific system path string.\r\n */\r\nCSInterface.prototype.getSystemPath = function(pathType)\r\n{\r\n    var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));\r\n    var OSVersion = this.getOSInformation();\r\n    if (OSVersion.indexOf(\"Windows\") >= 0)\r\n    {\r\n      path = path.replace(\"file:///\", \"\");\r\n    }\r\n    else if (OSVersion.indexOf(\"Mac\") >= 0)\r\n    {\r\n      path = path.replace(\"file://\", \"\");\r\n    }\r\n    return path;\r\n};\r\n\r\n/**\r\n * Evaluates a JavaScript script, which can use the JavaScript DOM\r\n * of the host application.\r\n *\r\n * @param script    The JavaScript script.\r\n * @param callback  Optional. A callback function that receives the result of execution.\r\n *          If execution fails, the callback function receives the error message \\c EvalScript_ErrMessage.\r\n */\r\nCSInterface.prototype.evalScript = function(script, callback)\r\n{\r\n    if(callback == null || callback == undefined)\r\n    {\r\n        callback = function(result){};\r\n    }\r\n    window.__adobe_cep__.evalScript(script, callback);\r\n};\r\n\r\n/**\r\n * Retrieves the unique identifier of the application.\r\n * in which the extension is currently running.\r\n *\r\n * @return The unique ID string.\r\n */\r\nCSInterface.prototype.getApplicationID = function()\r\n{\r\n    var appId = this.hostEnvironment.appId;\r\n    return appId;\r\n};\r\n\r\n/**\r\n * Retrieves host capability information for the application\r\n * in which the extension is currently running.\r\n *\r\n * @return A \\c #HostCapabilities object.\r\n */\r\nCSInterface.prototype.getHostCapabilities = function()\r\n{\r\n    var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities() );\r\n    return hostCapabilities;\r\n};\r\n\r\n/**\r\n * Triggers a CEP event programmatically. Yoy can use it to dispatch\r\n * an event of a predefined type, or of a type you have defined.\r\n *\r\n * @param event A \\c CSEvent object.\r\n */\r\nCSInterface.prototype.dispatchEvent = function(event)\r\n{\r\n    if (typeof event.data == \"object\")\r\n    {\r\n        event.data = JSON.stringify(event.data);\r\n    }\r\n\r\n    window.__adobe_cep__.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Registers an interest in a CEP event of a particular type, and\r\n * assigns an event handler.\r\n * The event infrastructure notifies your extension when events of this type occur,\r\n * passing the event object to the registered handler function.\r\n *\r\n * @param type     The name of the event type of interest.\r\n * @param listener The JavaScript handler function or method.\r\n * @param obj      Optional, the object containing the handler method, if any.\r\n *         Default is null.\r\n */\r\nCSInterface.prototype.addEventListener = function(type, listener, obj)\r\n{\r\n    window.__adobe_cep__.addEventListener(type, listener, obj);\r\n};\r\n\r\n/**\r\n * Removes a registered event listener.\r\n *\r\n * @param type      The name of the event type of interest.\r\n * @param listener  The JavaScript handler function or method that was registered.\r\n * @param obj       Optional, the object containing the handler method, if any.\r\n *          Default is null.\r\n */\r\nCSInterface.prototype.removeEventListener = function(type, listener, obj)\r\n{\r\n    window.__adobe_cep__.removeEventListener(type, listener, obj);\r\n};\r\n\r\n/**\r\n * Loads and launches another extension, or activates the extension if it is already loaded.\r\n *\r\n * @param extensionId       The extension's unique identifier.\r\n * @param startupParams     Not currently used, pass \"\".\r\n *\r\n * @example\r\n * To launch the extension \"help\" with ID \"HLP\" from this extension, call:\r\n * <code>requestOpenExtension(\"HLP\", \"\"); </code>\r\n *\r\n */\r\nCSInterface.prototype.requestOpenExtension = function(extensionId, params)\r\n{\r\n    window.__adobe_cep__.requestOpenExtension(extensionId, params);\r\n};\r\n\r\n/**\r\n * Retrieves the list of extensions currently loaded in the current host application.\r\n * The extension list is initialized once, and remains the same during the lifetime\r\n * of the CEP session.\r\n *\r\n * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.\r\n *          If omitted, retrieves data for all extensions.\r\n *\r\n * @return Zero or more \\c #Extension objects.\r\n */\r\nCSInterface.prototype.getExtensions = function(extensionIds)\r\n{\r\n    var extensionIdsStr = JSON.stringify(extensionIds);\r\n    var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);\r\n\r\n    var extensions = JSON.parse(extensionsStr);\r\n    return extensions;\r\n};\r\n\r\n/**\r\n * Retrieves network-related preferences.\r\n *\r\n * @return A JavaScript object containing network preferences.\r\n */\r\nCSInterface.prototype.getNetworkPreferences = function()\r\n{\r\n    var result = window.__adobe_cep__.getNetworkPreferences();\r\n    var networkPre = JSON.parse(result);\r\n\r\n    return networkPre;\r\n};\r\n\r\n/**\r\n * Initializes the resource bundle for this extension with property values\r\n * for the current application and locale.\r\n * To support multiple locales, you must define a property file for each locale,\r\n * containing keyed display-string values for that locale.\r\n * See localization documentation for Extension Builder and related products.\r\n *\r\n * Keys can be in the\r\n * form <code>key.value=\"localized string\"</code>, for use in HTML text elements.\r\n * For example, in this input element, the localized \\c key.value string is displayed\r\n * instead of the empty \\c value string:\r\n *\r\n * <code><input type=\"submit\" value=\"\" data-locale=\"key\"/></code>\r\n *\r\n * @return An object containing the resource bundle information.\r\n */\r\nCSInterface.prototype.initResourceBundle = function()\r\n{\r\n    var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());\r\n    var resElms = document.querySelectorAll('[data-locale]');\r\n    for (var n = 0; n < resElms.length; n++)\r\n    {\r\n       var resEl = resElms[n];\r\n       // Get the resource key from the element.\r\n       var resKey = resEl.getAttribute('data-locale');\r\n       if (resKey)\r\n       {\r\n           // Get all the resources that start with the key.\r\n           for (var key in resourceBundle)\r\n           {\r\n               if (key.indexOf(resKey) == 0)\r\n               {\r\n                   var resValue = resourceBundle[key];\r\n                   if (key.length == resKey.length)\r\n                   {\r\n                        resEl.innerHTML = resValue;\r\n                   }\r\n                   else if ('.' == key.charAt(resKey.length))\r\n                   {\r\n                        var attrKey = key.substring(resKey.length + 1);\r\n                        resEl[attrKey] = resValue;\r\n                   }\r\n               }\r\n           }\r\n       }\r\n    }\r\n    return resourceBundle;\r\n};\r\n\r\n/**\r\n * Writes installation information to a file.\r\n *\r\n * @return The file path.\r\n */\r\nCSInterface.prototype.dumpInstallationInfo = function()\r\n{\r\n    return window.__adobe_cep__.dumpInstallationInfo();\r\n};\r\n\r\n/**\r\n * Retrieves version information for the current Operating System,\r\n * See http://www.useragentstring.com/pages/Chrome/ for Chrome \\c navigator.userAgent values.\r\n *\r\n * @return A string containing the OS version, or \"unknown Operation System\".\r\n * If user customizes the User Agent by setting CEF command parameter \"--user-agent\", only\r\n * \"Mac OS X\" or \"Windows\" will be returned. \r\n */\r\nCSInterface.prototype.getOSInformation = function()\r\n{\r\n    var userAgent = navigator.userAgent;\r\n\r\n    if ((navigator.platform == \"Win32\") || (navigator.platform == \"Windows\"))\r\n    {\r\n        var winVersion = \"Windows\";\r\n        var winBit = \"\";\r\n        if (userAgent.indexOf(\"Windows\") > -1)\r\n        {\r\n            if (userAgent.indexOf(\"Windows NT 5.0\") > -1)\r\n            {\r\n                winVersion = \"Windows 2000 \";\r\n            }\r\n            else if (userAgent.indexOf(\"Windows NT 5.1\") > -1)\r\n            {\r\n                winVersion = \"Windows XP \";\r\n            }\r\n            else if (userAgent.indexOf(\"Windows NT 5.2\") > -1)\r\n            {\r\n                winVersion = \"Windows Server 2003 \";\r\n            }\r\n            else if (userAgent.indexOf(\"Windows NT 6.0\") > -1)\r\n            {\r\n                winVersion = \"Windows Vista \";\r\n            }\r\n            else if (userAgent.indexOf(\"Windows NT 6.1\") > -1)\r\n            {\r\n                winVersion = \"Windows 7 \";\r\n            }\r\n            else if (userAgent.indexOf(\"Windows NT 6.2\") > -1)\r\n            {\r\n                winVersion = \"Windows 8 \";\r\n            }\r\n\r\n            if (userAgent.indexOf(\"WOW64\") > -1)\r\n            {\r\n                winBit = \"64-bit\";\r\n            }\r\n            else\r\n            {\r\n                winBit = \"32-bit\";\t\t\t\r\n            }\r\n        }\r\n\r\n        return winVersion + winBit;\r\n    }\r\n    else if ((navigator.platform == \"MacIntel\") || (navigator.platform == \"Macintosh\"))\r\n    {        \r\n        var result = \"Mac OS X\";\r\n        var agentStr = new String();\r\n        agentStr = userAgent;\r\n        if (agentStr.indexOf(\"Mac OS X\") > -1)\r\n        {\r\n            var verLength = agentStr.indexOf(\")\") - agentStr.indexOf(\"Mac OS X\");\r\n            var verStr = agentStr.substr(agentStr.indexOf(\"Mac OS X\"), verLength);\r\n            result = verStr.replace(\"_\", \".\");\r\n            result = result.replace(\"_\", \".\");        \r\n        }\r\n\r\n        return result;        \r\n    }\r\n\r\n    return \"Unknown Operation System\";\r\n};\r\n\r\n/**\r\n * Opens a page in the default system browser.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @param url  The URL of the page/file to open, or the email address.\r\n * Must use HTTP/HTTPS/file/mailto protocol. For example:\r\n *   \"http://www.adobe.com\"\r\n *   \"https://github.com\"\r\n *   \"file:///C:/log.txt\"\r\n *   \"mailto:test@adobe.com\"\r\n *\r\n * @return One of these error codes:\\n\r\n *      <ul>\\n\r\n *          <li>NO_ERROR - 0</li>\\n\r\n *          <li>ERR_UNKNOWN - 1</li>\\n\r\n *          <li>ERR_INVALID_PARAMS - 2</li>\\n\r\n *          <li>ERR_INVALID_URL - 201</li>\\n\r\n *      </ul>\\n\r\n */\r\nCSInterface.prototype.openURLInDefaultBrowser = function(url)\r\n{\r\n    return cep.util.openURLInDefaultBrowser(url);\r\n};\r\n\r\n/**\r\n * Retrieves extension ID.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @return extension ID.\r\n */\r\nCSInterface.prototype.getExtensionID = function()\r\n{\r\n     return window.__adobe_cep__.getExtensionId();\r\n};\r\n\r\n/**\r\n * Retrieves the scale factor of screen. \r\n * On Windows platform, the value of scale factor might be different from operating system's scale factor,\r\n * since host application may use its self-defined scale factor.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @return One of the following integer.\r\n *      <ul>\\n\r\n *          <li>-1 means fail to get scale factor or this API has not been available on Windows yet</li>\\n\r\n *          <li>1 means normal screen</li>\\n\r\n *          <li>2 means HiDPI screen</li>\\n\r\n *      </ul>\\n\r\n */\r\nCSInterface.prototype.getScaleFactor = function()\r\n{\r\n    return window.__adobe_cep__.getScaleFactor();\r\n};\r\n\r\n/**\r\n * Set a handler to detect any changes of scale factor. This only works on Mac.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @param handler   The function to be called when scale factor is changed.\r\n *\r\n */\r\nCSInterface.prototype.setScaleFactorChangedHandler = function(handler)\r\n{\r\n    window.__adobe_cep__.setScaleFactorChangedHandler(handler);\r\n};\r\n\r\n/**\r\n * Retrieves current API version.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @return ApiVersion object.\r\n *\r\n */\r\nCSInterface.prototype.getCurrentApiVersion = function()\r\n{\r\n    var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());\r\n    return apiVersion;\r\n};\r\n\r\n/**\r\n * Set panel flyout menu by an XML.\r\n *\r\n * Since 5.2.0\r\n *\r\n * Register a callback function for \"com.adobe.csxs.events.flyoutMenuClicked\" to get notified when a \r\n * menu item is clicked.\r\n * The \"data\" attribute of event is an object which contains \"menuId\" and \"menuName\" attributes. \r\n *\r\n * Register callback functions for \"com.adobe.csxs.events.flyoutMenuOpened\" and \"com.adobe.csxs.events.flyoutMenuClosed\"\r\n * respectively to get notified when flyout menu is opened or closed.\r\n *\r\n * @param menu     A XML string which describes menu structure.\r\n * An example menu XML:\r\n * <Menu>\r\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checked=\"false\"/>\r\n *   <MenuItem Label=\"TestExample2\">\r\n *     <MenuItem Label=\"TestExample2-1\" >\r\n *       <MenuItem Label=\"TestExample2-1-1\" Enabled=\"false\" Checked=\"true\"/>\r\n *     </MenuItem>\r\n *     <MenuItem Label=\"TestExample2-2\" Enabled=\"true\" Checked=\"true\"/>\r\n *   </MenuItem>\r\n *   <MenuItem Label=\"---\" />\r\n *   <MenuItem Label=\"TestExample3\" Enabled=\"false\" Checked=\"false\"/>\r\n * </Menu>\r\n *\r\n */\r\nCSInterface.prototype.setPanelFlyoutMenu = function(menu)\r\n{\r\n    if (\"string\" != typeof menu)\r\n    {\r\n        return;\t\r\n    }\r\n\r\n\twindow.__adobe_cep__.invokeSync(\"setPanelFlyoutMenu\", menu);\r\n};\r\n\r\n/**\r\n * Updates a menu item in the extension window's flyout menu, by setting the enabled\r\n * and selection status.\r\n *  \r\n * Since 5.2.0\r\n *\r\n * @param menuItemLabel\tThe menu item label. \r\n * @param enabled\t\tTrue to enable the item, false to disable it (gray it out).\r\n * @param checked\t\tTrue to select the item, false to deselect it.\r\n *\r\n * @return false when the host application does not support this functionality (HostCapabilities.EXTENDED_PANEL_MENU is false). \r\n *         Fails silently if menu label is invalid.\r\n *\r\n * @see HostCapabilities.EXTENDED_PANEL_MENU\r\n */\r\nCSInterface.prototype.updatePanelMenuItem = function(menuItemLabel, enabled, checked)\r\n{\r\n\tvar ret = false;\r\n\tif (this.getHostCapabilities().EXTENDED_PANEL_MENU) \r\n\t{\r\n\t\tvar itemStatus = new MenuItemStatus(menuItemLabel, enabled, checked);\r\n\t\tret = window.__adobe_cep__.invokeSync(\"updatePanelMenuItem\", JSON.stringify(itemStatus));\r\n\t}\r\n\treturn ret;\r\n};\r\n\r\n\r\n/**\r\n * Set context menu by XML string.\r\n *\r\n * Since 5.2.0\r\n *\r\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\r\n * - an item without menu ID or menu name is disabled and is not shown.\r\n * - if the item name is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\r\n * - Checkable attribute takes precedence over Checked attribute.\r\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item. \r\n     The Chrome extension contextMenus API was taken as a reference. \r\n     https://developer.chrome.com/extensions/contextMenus\r\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\r\n *\r\n * @param menu      A XML string which describes menu structure.\r\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\r\n *\r\n * An example menu XML:\r\n * <Menu>\r\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checkable=\"true\" Checked=\"false\" Icon=\"./image/small_16X16.png\"/>\r\n *   <MenuItem Id=\"menuItemId2\" Label=\"TestExample2\">\r\n *     <MenuItem Id=\"menuItemId2-1\" Label=\"TestExample2-1\" >\r\n *       <MenuItem Id=\"menuItemId2-1-1\" Label=\"TestExample2-1-1\" Enabled=\"false\" Checkable=\"true\" Checked=\"true\"/>\r\n *     </MenuItem>\r\n *     <MenuItem Id=\"menuItemId2-2\" Label=\"TestExample2-2\" Enabled=\"true\" Checkable=\"true\" Checked=\"true\"/>\r\n *   </MenuItem>\r\n *   <MenuItem Label=\"---\" />\r\n *   <MenuItem Id=\"menuItemId3\" Label=\"TestExample3\" Enabled=\"false\" Checkable=\"true\" Checked=\"false\"/>\r\n * </Menu>\r\n */\r\nCSInterface.prototype.setContextMenu = function(menu, callback)\r\n{\r\n    if (\"string\" != typeof menu)\r\n    {\r\n        return;\r\n    }\r\n    \r\n\twindow.__adobe_cep__.invokeAsync(\"setContextMenu\", menu, callback);\r\n};\r\n\r\n/**\r\n * Set context menu by JSON string.\r\n *\r\n * Since 6.0.0\r\n *\r\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\r\n * - an item without menu ID or menu name is disabled and is not shown.\r\n * - if the item label is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\r\n * - Checkable attribute takes precedence over Checked attribute.\r\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item. \r\n     The Chrome extension contextMenus API was taken as a reference.\r\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\r\n     https://developer.chrome.com/extensions/contextMenus\r\n *\r\n * @param menu      A JSON string which describes menu structure.\r\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\r\n *\r\n * An example menu JSON:\r\n *\r\n * { \r\n *      \"menu\": [\r\n *          {\r\n *              \"id\": \"menuItemId1\",\r\n *              \"label\": \"testExample1\",\r\n *              \"enabled\": true,\r\n *              \"checkable\": true,\r\n *              \"checked\": false,\r\n *              \"icon\": \"./image/small_16X16.png\"\r\n *          },\r\n *          {\r\n *              \"id\": \"menuItemId2\",\r\n *              \"label\": \"testExample2\",\r\n *              \"menu\": [\r\n *                  {\r\n *                      \"id\": \"menuItemId2-1\",\r\n *                      \"label\": \"testExample2-1\",\r\n *                      \"menu\": [\r\n *                          {\r\n *                              \"id\": \"menuItemId2-1-1\",\r\n *                              \"label\": \"testExample2-1-1\",\r\n *                              \"enabled\": false,\r\n *                              \"checkable\": true,\r\n *                              \"checked\": true\r\n *                          }\r\n *                      ]\r\n *                  },\r\n *                  {\r\n *                      \"id\": \"menuItemId2-2\",\r\n *                      \"label\": \"testExample2-2\",\r\n *                      \"enabled\": true,\r\n *                      \"checkable\": true,\r\n *                      \"checked\": true\r\n                    }\r\n *              ]\r\n *          },\r\n *          {\r\n *              \"label\": \"---\"\r\n *          },\r\n *          {\r\n *              \"id\": \"menuItemId3\",\r\n *              \"label\": \"testExample3\",\r\n *              \"enabled\": false,\r\n *              \"checkable\": true,\r\n *              \"checked\": false\r\n *          }\r\n *      ]\r\n *  }\r\n *\r\n */\r\nCSInterface.prototype.setContextMenuByJSON = function(menu, callback)\r\n{\r\n    if (\"string\" != typeof menu)\r\n    {\r\n        return;\t\r\n    }\r\n    \r\n\twindow.__adobe_cep__.invokeAsync(\"setContextMenuByJSON\", menu, callback);\r\n};\r\n\r\n/**\r\n * Updates a context menu item by setting the enabled and selection status.\r\n *  \r\n * Since 5.2.0\r\n *\r\n * @param menuItemID\tThe menu item ID. \r\n * @param enabled\t\tTrue to enable the item, false to disable it (gray it out).\r\n * @param checked\t\tTrue to select the item, false to deselect it.\r\n */\r\nCSInterface.prototype.updateContextMenuItem = function(menuItemID, enabled, checked)\r\n{\r\n\tvar itemStatus = new ContextMenuItemStatus(menuItemID, enabled, checked);\r\n\tret = window.__adobe_cep__.invokeSync(\"updateContextMenuItem\", JSON.stringify(itemStatus));\r\n};\r\n\r\n/**\r\n * Get the visibility status of an extension window. \r\n *  \r\n * Since 6.0.0\r\n *\r\n * @return true if the extension window is visible; false if the extension window is hidden.\r\n */\r\nCSInterface.prototype.isWindowVisible = function()\r\n{\r\n\treturn window.__adobe_cep__.invokeSync(\"isWindowVisible\", \"\");\r\n};\r\n\r\n/**\r\n * Resize extension's content to the specified dimensions.\r\n * 1. Works with modal and modeless extensions in all Adobe products.\r\n * 2. Extension's manifest min/max size constraints apply and take precedence. \r\n * 3. For panel extensions\r\n *    3.1 This works in all Adobe products except:\r\n *        * Premiere Pro\r\n *        * Prelude\r\n *        * After Effects\r\n *    3.2 When the panel is in certain states (especially when being docked),\r\n *        it will not change to the desired dimensions even when the\r\n *        specified size satisfies min/max constraints.\r\n *\r\n * Since 6.0.0\r\n *\r\n * @param width  The new width\r\n * @param height The new height\r\n */\r\nCSInterface.prototype.resizeContent = function(width, height)\r\n{\r\n    window.__adobe_cep__.resizeContent(width, height);\r\n};"],"sourceRoot":""}